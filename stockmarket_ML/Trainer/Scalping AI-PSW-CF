import math
import numpy as np
import random

def sigmoid(x, alpha):
    e = 2.71828
    big = e**30 - 1
    if(alpha * x < 30):
        return 1.0 / (1.0 + e**(alpha * x))
    else:
        return 1.0 / (1.0 + big)

def Makebatch(Num):
    Batch1 = []
    Batch2 = []
    for i in range(Num):
        if(random.random() < 0.5):
            Batch1.append(i)
        else:
            Batch2.append(i)
    return [Batch1, Batch2]


class NN:
    def __init__(self, Dim, Alpha, P_Target):
        self.dim = Dim
        self.W = np.zeros(self.dim)
        self.target = P_Target
        self.alpha = Alpha
        self.R = 1.0

    def initW(self, N):
        for i in range(self.dim):
            self.W[i] = N
    
    def FeedForward(self, P):
        WP = 0
        for i in range(self.dim):
            WP += ((self.W[i]**2)*self.target[i] - (self.W[i]**2)*P[i])**2
        z = WP - self.R
        L = sigmoid(z, self.alpha)
        return L


    def FeedForward_W(self, P, _W):
        WP = 0
        for i in range(self.dim):
            WP += ((_W[i]**2)*self.target[i] - (_W[i]**2)*P[i])**2
        z = WP - self.R
        L = sigmoid(z, self.alpha)
        return L

    def train(self, batch, P, Y, LR):
        _W1 = np.zeros(self.dim)
        _W2 = np.zeros(self.dim)
        __W1 = np.zeros(self.dim)
        __W2 = np.zeros(self.dim)
        for i in range(len(batch)):
            L = self.FeedForward(P[batch[i]])
            for j in range(self.dim):
                _W1[j] += -Y[batch[i]] * self.alpha * L * (1 - L) * 4 * ((self.W[j])**2 * P[batch[i]][j] - (self.W[j])**2 * self.target[j]) * self.W[j] * (P[batch[i]][j] - self.target[j])
                _W2[j] += -self.alpha * L * (1 - L) * 4 * ((self.W[j])**2 * P[batch[i]][j] - (self.W[j])**2 * self.target[j]) * self.W[j] * (P[batch[i]][j] - self.target[j])

        J_P = 0
        J_N = 0
        delta_J_P_P = 0
        delta_J_P_N = 0
        delta_J_N_N = 0
        delta_J_N_P = 0
        for i in range(len(batch)):
            for j in range(self.dim):
                __W1[j] = self.W[j]
                __W2[j] = self.W[j]
            J_P += Y[batch[i]] * self.FeedForward_W(P[batch[i]], __W1)
            J_N += self.FeedForward_W(P[batch[i]], __W2)
            for j in range(self.dim):
                __W1[j] += _W1[j] * LR
                __W2[j] += _W2[j] * LR
            delta_J_P_P += Y[batch[i]] * self.FeedForward_W(P[batch[i]], __W1)
            delta_J_P_N += self.FeedForward_W(P[batch[i]], __W1)
            delta_J_N_N += self.FeedForward_W(P[batch[i]], __W2)
            delta_J_N_P += Y[batch[i]] * self.FeedForward_W(P[batch[i]], __W2)
        delta_J_P_P -= J_P
        delta_J_P_N -= J_N
        delta_J_N_N -= J_N
        delta_J_N_P -= J_P

        a = 1.0
        b = 0.01
        A = b * delta_J_N_P - a * delta_J_N_N
        B = a * delta_J_P_N - b * delta_J_P_P
        if(A * delta_J_P_P + B * delta_J_N_P < 0):
            A = -A
            B = -B
        
        for j in range(self.dim):
            self.W[j] += _W1[j] * A / (A**2 + B**2)**0.5 * LR
            self.W[j] += _W2[j] * B / (A**2 + B**2)**0.5 * LR

    def profit(self, batch, P, Y, Date, Code, Filename):
        profit = 0
        Num = 0
        profitlist = []
        f1 = open(Filename, "a")
        cost = 0
        for i in range(len(batch)):
            L = self.FeedForward(P[batch[i]])
            cost += L * Y[batch[i]]
            if(L >= 0.5):
                profit += Y[batch[i]]
                f1.write(Date[batch[i]]+" "+Code[batch[i]]+" "+"%.2f\n"%Y[batch[i]])
                Num += 1
                profitlist.append(batch[i])
        f1.close()
        if(len(profitlist) < 10):
            return [cost, profit, Num, profitlist]
        else:
            return [cost, profit, Num]

f = open("stockcodes.txt", "r")
s = f.read()
stockcodes = s.split()
f.close()

D = []
Date = []
Code = []
path = "C:/Users/user/Desktop/Python/어치/Core/Data Center/stockdata/"



for item in range(1):
    f = open(path+"Phasespace/Phasespace_"+stockcodes[item]+".txt", "r")
    s = f.readlines()
    dim = len(s[0].split()) - 2
    for i in range(len(s)):
        D.append(s[i].split()[2:dim + 2])
        Code.append(s[i].split()[0])
        Date.append(s[i].split()[1])
        for j in range(len(D[i])):
            D[i][j] = float(D[i][j])
    f.close()
    
    #Batch_NT = np.arange(len(D) // 2, len(D), dtype = int)
    #Batch_T = np.arange(len(D) // 2, dtype = int)
    [Batch_NT, Batch_T] = Makebatch(len(D))

    f = open(path+"Label/Label_"+stockcodes[item]+".txt", "r")
    s = f.read()
    _Label = s.split()
    Label = []
    for i in range(len(_Label)):
        if(i % 3 == 2):
            Label.append(float(_Label[i]))
    f.close()
        

    Label_profit = []

    for i in range(len(Label)):
        if(Label[i] >= 6.0 and i in Batch_T):
            Label_profit.append(i)

    f = open("Hypersphere/Hypersphere_"+stockcodes[item]+".txt", "w")
    f.close()
    
    for i in range(2, len(Label_profit) // 2):
        TEST = Label_profit[i]

        NN1 = NN(dim, 0.5, D[TEST])
        NN1.initW(0.6)

        for Epoch in range(1000):
            Bcost = NN1.profit(Batch_T, D, Label, Date, Code, "temp.txt")
            if(Bcost[2] != 0):
                print("Bcost: "+"%.3f "%Bcost[0]+"%.3f "%Bcost[1]+"%d "%Bcost[2]+"%.2f"%(Bcost[1] / Bcost[2]))
            else:
                print("Bcost: "+"%.3f "%Bcost[0]+"%.3f "%Bcost[1]+"%d "%Bcost[2])
            Ncost = NN1.profit(Batch_NT, D, Label, Date, Code, "temp.txt")
            if(Ncost[2] != 0):
                print("Ncost: "+"%.3f "%Ncost[0]+"%.3f "%Ncost[1]+"%d "%Ncost[2]+"%.2f"%(Ncost[1] / Ncost[2]))
            else:
                print("Ncost: "+"%.3f "%Ncost[0]+"%.3f "%Ncost[1]+"%d "%Ncost[2])
            print("")
            NN1.train(Batch_T, D, Label, 0.001)
            
        f = open("result_"+stockcodes[item]+"/result_"+"%d_"%i+stockcodes[item]+"_N.txt", "w")
        f.write("")
        f.close()
        f = open("result_"+stockcodes[item]+"/result_"+"%d_"%i+stockcodes[item]+"_B.txt", "w")
        f.write("")
        f.close()
        Nprofit = NN1.profit(Batch_NT, D, Label, Date, Code, "result_"+stockcodes[item]+"/result_"+"%d_"%i+stockcodes[item]+"_N.txt")
        Bprofit = NN1.profit(Batch_T, D, Label, Date, Code, "result_"+stockcodes[item]+"/result_"+"%d_"%i+stockcodes[item]+"_B.txt")
        
        if(Bprofit[2] != 0):
            f1 = open("result_"+stockcodes[item]+"/result_"+"%d_"%i+stockcodes[item]+"_B.txt", "a")
            f1.write("\n"+"Average Profit: %.6f, "%(Bprofit[1] / Bprofit[2])+"Profit: %.3f, "%Bprofit[1]+"Num: %d, "%Bprofit[2]+"TEST: %d"%TEST+"\n\n")
            f1.close()
        
        if(Nprofit[2] != 0 and Bprofit[2] != 0):
            f1 = open("result_"+stockcodes[item]+"/result_"+"%d_"%i+stockcodes[item]+"_N.txt", "a")
            f1.write("\n"+"Average Profit: %.6f, "%(Nprofit[1] / Nprofit[2])+"Profit: %.3f, "%Nprofit[1]+"Num: %d, "%Nprofit[2]+"TEST: %d"%TEST+"\n\n")
            f1.close()
            #if(Nprofit[0] / Nprofit[1] > 1 and Nprofit[1] > 30):
            if(1):
                f = open("Hypersphere/Hypersphere_"+stockcodes[item]+".txt", "a")
                for j in range(len(NN1.W)):
                    f.write("%.6f "%NN1.W[j])
                f.write("\n")
                for j in range(len(D[TEST])):
                    f.write("%.6f "%D[TEST][j])
                f.write("\n")
                print("Nprofit")
                print(Nprofit)
                print(Nprofit[1] / Nprofit[2])
                print("Bprofit")
                print(Bprofit)
                print(Bprofit[1] / Bprofit[2])
                print("TEST")
                print(TEST)
                f.write("%.3f "%Nprofit[1])
                f.write("%d "%Nprofit[2])
                f.write("%d"%TEST)
                f.write("\n\n")
                f.close()
